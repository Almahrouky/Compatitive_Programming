const int mod = 1e9 + 7;
vector<long long> fac, inv, finv;
void init(int n)
{
    fac.resize(n + 1);
    inv.resize(n + 1);
    finv.resize(n + 1);
    fac[0] = inv[0] = inv[1] = finv[0] = finv[1] = 1;
    for (long long i = 1; i <= n; ++i)
        fac[i] = fac[i - 1] * i % mod;
    for (long long i = 2; i <= n; ++i)
        inv[i] = mod - mod / i * inv[mod % i] % mod;
    for (long long i = 2; i <= n; ++i)
        finv[i] = finv[i - 1] * inv[i] % mod;
}
long long add(long long a, long long b) { return ((a % mod) + (b % mod)) % mod; }
long long mul(long long a, long long b) { return ((a % mod) * (b % mod)) % mod; }
long long sub(long long a, long long b) { return ((a % mod) - (b % mod) + mod) % mod; }
long long fast_pow(long long a, long long b)
{
    long long ret = 1;
    while (b > 0)
    {
        if (b & 1)
            ret *= a;
        a *= a;
        b /= 2;
    }
    return ret;
}
long long nCr(long long x, long long y)
{
    if (x < 0 || y > x || y < 0)
        return (0);
    return (fac[x] * finv[y] % mod * finv[x - y] % mod);
}
long long nPr(long long x, long long y)
{
    if (x < 0 || y > x || y < 0)
        return 0;
    return fac[x] * finv[x - y] % mod;
}
long long Inv(long long x) { return fast_pow(x, mod - 2); }
long long Catalan(long long n) { return (nCr(2 * n, n) * Inv(n + 1)) % mod; }
long long StarsAndPars(long long n, long long k) { return nCr(n + k - 1, k - 1); }
